# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/rhel7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"
  config.disksize.size = '50GB'
  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #

   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "12288"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL

subscription-manager register --username=<username> --password=<password>
subscription-manager attach --pool=<poolid>
subscription-manager repos --disable=rhel-7-server-htb-rpms
yum update -y

subscription-manager repos \
    --enable="rhel-7-server-rpms" \
    --enable="rhel-7-server-extras-rpms" \
    --enable="rhel-7-server-ose-3.11-rpms" \
    --enable="rhel-7-server-ansible-2.6-rpms" \
    --enable="rh-gluster-3-client-for-rhel-7-server-rpms"
yum update -y
yum install -y wget git net-tools bind-utils yum-utils iptables-services bridge-utils bash-completion kexec-tools sos psacct openshift-ansible docker-1.13.1

systemctl enable docker
systemctl start docker
systemctl is-active docker

cd /etc/pki/tls/private/
wget https://s3-eu-west-1.amazonaws.com/<location of your cert key file>
cd /etc/pki/tls/certs/
wget https://s3-eu-west-1.amazonaws.com/<location of your cert  file>
wget https://s3-eu-west-1.amazonaws.com/<location of your cert authority file>

mkdir ~/.ssh
cd ~/.ssh
rm -rf
cat <<EOF > id_rsa.pub
<the content of a public key file>
EOF
chmod 644 id_rsa.pub

cp id_rsa.pub authorized_keys
chmod 600 authorized_keys

cat <<EOF > ~/.ssh/config
Host *
   StrictHostKeyChecking no
   UserKnownHostsFile=/dev/null

EOF

chmod 600 ~/.ssh/config

cat <<EOF > id_rsa
-----BEGIN RSA PRIVATE KEY-----
........
-----END RSA PRIVATE KEY-----
EOF

chmod 600 id_rsa

cd ~
git clone https://github.com/justindav1s/openshift-ansible-on-openstack.git

#For stoarage
mkdir /kube_volumes
chmod -R 777 /kube_volumes

#For Service Mesh
cat <<EOF > /etc/sysctl.d/99-elasticsearch.conf
vm.max_map_count = 262144
EOF

echo Rebooting .........
reboot

SHELL
end
